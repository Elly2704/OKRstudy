#Оператор цикла while - позволяет выполнить одну и ту же последовательность действий, пока проверяемое условие истинно.
#Условие записывается до тела цикла и проверяется до выполнения тела цикла. Как правило, цикл while используется, когда
#невозможно определить точное значение количества проходов исполнения цикла.

#Заголовок цикла - оператор цикла с условием цикла
#Тело цикла - набор операторов, выполняемых в цикле
#Итерация - однократное выполнение тела цикла

# На каждой итерации цикла пользователь вводит целое число. Цикл продолжается, пока не встретится число 0. Необходимо
# вычислить сумму введенных в цикле чисел и вывести результат на экран.
n = 1
s = 0
while n != 0:
    n = int(input())
    s += n
print(s)

# Example
el = 5
while el < 10:
    print(el)
    el += 1

isHappy = True
while isHappy:
    if input('Happy?') == ' Yes':
        isHappy = False

#Вводится натуральное (то есть, целое положительное) число (от трехзначного и более). Найти произведение всех его цифр.
# Результат вывести на экран.
n = int(input())
s = 1
while n != 0:
    d = n % 10
    s *= d
    n = n // 10
print(s)

#Последовательность Фибоначчи
a, b, count = 1, 1, 0
n = int(input())
while count < n:
    print(a, end=' ')
    a, b = b, a+b
    count += 1

# Операторы break, continue и else
# break - досрочное прерывание работы оператора цикла
# continue - пропуск одной итерации цикла
# else - блок операторов, исполняемых при штатном завершении цикла

# На каждой итерации цикла вводится целое число. Необходимо подсчитать произведение только положительных чисел, до т
# ех пор, пока не будет введено значение 0.
pr = 1
while True:
    n = int(input())
    if n == 0:
        break
    elif n < 0:
        continue
    pr *= n

print(pr)

#Вводится список названий городов в одну строчку через пробел. Определить, что в этом списке все города имеют длину
# более 5 символов. Реализовать программу с использованием цикла while и оператора break. Вывести ДА, если условие
# выполняется и НЕТ - в противном случае.
b = input().split()
s = 0
while s <= len(b):
    if s == len(b):
        print("ДА")
        break
    if len(b[s]) >= 5:
        s+= 1
    else:
        print("НЕТ")
        break

# Оператор цикла for и функция range(диапазон - позволяет получить элемента)
# В цикле выполняет блок кода заданное число раз, с его помощью очень легко реализовывать перебор, так называемых,
# итерированных объектов.
# Синтаксис:
# for <переменная> in <итерируемый объект>:
#       оператор 1
#       оператор 2
#        …
#       оператор N
count = 0
word = 'My first project'
for new in word:
    if new == 't':
        count += 1
print('Count:', count)

i = 0
for i in range(-1,10):
    i +=1
    print(i, end=' ')

#Вводятся целые числа в одну строчку через пробел. Необходимо преобразовать эти данные в список целых чисел.
# Затем, перебрать этот список в цикле for и просуммировать все нечетные значения. Результат вывести на экран.
d = list(map(int, input().split()))
s = 0
for i in range(len(d)):
    if d[i] % 2 != 0:
        s += d[i]
print(s)

# Нахождение простого числа
m = int(input())

for x in range(2, m):
    if m % x == 0:
        print('НЕТ')
        break
else:
        print('ДА')

# Индекс, значение = enumerate(объект) - позволяет получить сразу индекс элемента и его значение.
n = list(map(int,input().split()))
for i, d in enumerate(n):
    d **= 2
    print(d, end=' ')

#Итератор (iterator) - это объект, который возвращает свои элементы по одному за раз. С точки зрения Python -
# это любой объект, у которого есть метод __next__ . Этот метод возвращает следующий элемент, если он есть, или
# возвращает исключение StopIteration, когда элементы закончились.
a = input()
b = iter(a)
print(next(b), next(b), next(b), next(b), end=' ')

# Вложенные циклы
# Вводится натуральное число n. Необходимо найти все простые числа, которые меньше этого числа n, то есть,
# в диапазоне [2; n). Результат вывести на экран в строчку через пробел.
n = int(input())

for num in range(2, n):
    for i in range(2, num):
        if num % 2 == 0:
            break
    else:
        if num == 3 or num % 3 != 0:
            print(num, end=' ')
# Как наименьшим количеством таких денежных купюр можно выплатить сумму n?
n = 221
lst = [64, 32, 16, 8, 4, 2, 1] # номинал купюр
lst = sorted(lst, reverse=True)
res = []
for i in range(len(lst)):
    while n >= lst[i]:
        n = n - lst[i]
        res.append(lst[i])

print(*res)

# Генераторы списков (List comprehension) - создание списка из элементов итерируемого обьекта
#[ВЫРАЖЕНИЕ for ПЕРЕМЕННАЯ in ИСТОЧНИК if УСЛОВИЕ]
n = 6
a = [x**2 for  x in range (n)]
print(a)

n = (5.56 -8.7 1.0 3.14 77.845)
lst =[abs(float(x)) for x in n.split()]
print(lst)

# Вводятся названия городов в строку через пробел. Необходимо сформировать список с помощью list comprehension,
# содержащий названия длиной более пяти символов.
city = input().split()
lst = [c for c in city if len(c)>5]
print(*lst)

# Вводятся два списка целых чисел одинаковой длины каждый с новой строки. С помощью list comprehension сформировать
# третий список, состоящий из суммы соответствующих пар чисел введенных списков. Результат вывести на экран в одну
# строку через пробел.
n =list(map(int,input().split()))
m =list(map(int,input().split()))
print(*([x + y for i, x in enumerate(n) for j, y in enumerate(m) if i == j]))







