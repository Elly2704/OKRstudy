#Cтрока не изменяемый тип данных.Строки можно задать в двойных,тройных двойных,тройных одинарных,одинарных кавычках
str = 'text'
str = "text"
str = """многострочный текст"""
print((a + ' ') * 2, (b + ' ') * 3, sep='')
# Конкатенация (слияние двух строк)
str = str1 + str2
# Повторение (повторить строку n-раз)
str = 'hello' * 10
# Обратиться к символу по индексу
symbol = str[i]
# Извлечение подстроки, срез (если индекса нет в строке будет ошибка IndexError)
str = str[i:j] # где i индекс начало среза, j - длина среза
# Расширенная операция извлечения подстроки
str[1:10:2] # каждый второй элемент в последовательности от 1 до 9, то есть Str[начальная позиция:конечная позиция:длина]
str[::2] # каждый второй элемент от начала и до конца стоки, в данном случае начальная позиция принимается как начало строки, конечная - как конец строки
str[::-1] # вывод списка в обратном порядке
# Длина строки
len(str)
a = input()
print('Строка: ' + str(a) + '.'+ ' Длина: '+ str(len(a)))
# Количество вхождений подстроки в строку, если нет совпадений - 0
str.count(symbol)
# Поиск подстроки, возвращает позицию первого совпадения, иначе -1
str.find(symbol)
# Поиск и замена, если строка не найдена - возвращает исходную строку
str.replace('Искомое', 'Новое')
# Разбить на список по символу, по умолчанию принимает символ пробела
str.split(symbol)
# Собрать список в строку, между элементами списка добавляется разделитель
'Разделитель символ'.join(str)
b, a = input().split()
print(a[1::2] == b[1:len(a):2])

#Функции ljust() и rjust() выполняют одну и ту же функцию, а именно: делают длину строки не меньше установленной длины и заполняют недостающее количество символами.
# Незначащие нули
str.rjust(x,'0')

# Регистр
str.upper() # к верхнему
str.lower() # к нижнему
str.title() # первый символ каждого слова к верхнему
str.capitalize() # первый символ строки к верхнему
str.isupper() # проверить находиться ли строка в верхнем регистре
str.islower() # проверить находиться ли строка в нижнем регистре
str.startswith('строка') # определяет начинается ли строка с указанной подстроки
str.endswith('строка') # определяет заканчивается ли строка с указанной подстрокой

# Удаляет пробельные символы
str.strip() # в начале и конце
str.lstrip() # в начале
str.rstrip() # в конце

#Форматирование строк и F-строки
a = str(input())
b = str(input())
c = int(input())
print("Уважаемый {0} {1}! Поздравляем Вас с {2}-летием!".format(a,b,c))
#Raw-строки
print(r'C:\WINDOWS\System32\drivers\etc\hosts')
#f-строки
a = input()
print(f'"{a}"')
a = input()
b = input()
c = int(input())
d = int(input())
print(f'г. {a}, ул. {b}, д. {c}, кв. {d}') # г. Киев, ул. Лукьяновская, д. 9, кв. 1

# Списки и операции над ними
# Списки – упорядоченные коллекции объектов произвольных типов.
# Создание списков
list = [] # пустой список
list = list()
list = [ 'hello', 5, [1,2,3] ] # список с вложенным списком
list[i] # индекс
list[i][j] # индекс индекса
list[i:j] # срез (элементы от i до j)
list[:] # срез всего списка(копия списка)

# Методы списков
len(list) # длинна(количество элементов)
list = [1,2,3] + [4,5,6] # конкатенация или объединение списков
list = [1,2,3] * 3 # дублирование, повторить то что в скобках n-раз, в данном случае 3 раза
list.append(a) # Добавляет элемент в конец списка
lst = input().split()
lst.append(lst[0] != lst[-1])
list.extend(L) # Расширяет список list, добавляя в конец все элементы списка L
list.sort() # Сортировка списка
sorted(lst)
list.index(x,[start[, end]]) # Возвращает положение первого элемента со значением x (при этом поиск ведется от start до end)
list.insert(i, х) # Вставляет на i-ый индекс значение x
list.reverse() # Изменение порядка следования элементов на обратный
list.count(x) # Возвращает количество элементов со значением x
list.copy() # Поверхностная копия списка
marks = list(map(int, input().split()))
print(round((sum(marks)/len(marks)),1)) # вычесление среднего значения

# Присвоение и создание элементов списка
list['индекс'] = 'значение' # присваивание по индексу
list['индекс начала', 'длинна'] = [2,3,4] #присвоить элементы
list.range(10) # создать список из 10 элементов, первый эл. будет иметь значение - 0, а последний - 9
list.range(3, 10) # создать список начиная с 3-го по 10-ый элемент - [3, 4, 5, 6, 7, 8, 9]

# Удаление элементов
del list['индекс']
del list['индекс начала', 'длинна']
list.pop() # удаляет последний элемент списка
list.pop(x) # удаляет элемент по индексу
list.remove('значение') # удаляет элемент с значением
list.clear()# удаляет элементы all

# Удалить в списке повторяющиеся элементы
list = list(set(list))

# Генераторы списков – это конструкция содержащая программный код,
# который создает список, содержащий значения/объекты, сгенерированные программным кодом. Читать генераторы списков
# рекомендуется начиная с цикла for, далее проверить есть ли условие в правой части, ну а после обратить внимание на
# левую часть где выполняются действия над элементом.
list = [x + 1 for x in range(10)] # создается новый список, элементы которого увеличены на единицу
list = [x + 1 for x in range(10) if x % 2 == 0] # создается новый список, четные элементы которого увеличены на единицу