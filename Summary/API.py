#HTTP — сокращение от HyperText Transfer Protocol (протокол передачи гипертекста). Протокол используется для общения
# клиента и сервера. Для тестирования в качестве клиента я использую Postman.

# GET: GET-запросы используются для получения данных от API. Метод GET запрашивает представление ресурса. Запросы
# с использованием этого метода могут только извлекать данные.
# POST: POST-запросы используются для отправки новых данных API. POST используется для отправки сущностей
# к определённому ресурсу. Часто вызывает изменение состояния или какие-то побочные эффекты на сервере.
# PUT: PUT-запросы используются для обновления уже существующих данных. PUT заменяет все текущие представления
# ресурса данными запроса.
# PATCH: PATCH-запросы (как и PUT) используются для обновления уже существующих данных. Разница в том, что с п
# омощью PATCH запросов можно обновить несколько записей за раз.
# OPTIONS: OPTIONS используется для описания параметров соединения с ресурсом.
# DELETE: DELETE-запросы используются для удаления существующих данных.

#AJAX — Asynchronous Javascript and XML. На странице создаеться объект XMLHttpRequest, который является посредником
# между Браузером пользователя и сервером. С помощью XMLHttpRequest можно отправить запрос на сервер, а также получить
# ответ в виде различного рода данных без полной перезагрузки страницы.

#Свойства объекта XMLHttpRequest
#onreadystatechange — одно из самых главных свойств объекта XMLHttpRequest. С помощью этого свойства задаётся
# обработчик, который вызывается всякий раз при смене статуса объекта.
#readyState — число, обозначающее статус объекта.
# (0 — Объект не инициализирован, создан объект XMLHttpRequest, но метод open() ещё не вызывался.
#1 — Объект загружает данные, открыто новое соединение с помощью open() (этот этап также включает установку
# значений HTTP заголовкам с помощью setRequestHeader()).
#2 — Объект загрузил свои данные, отправлен (вызван send() и получены заголовки ответа.
#3 — Объек не полностью загружен, но может взаимодействовать с пользователем, получена часть ответа.
#4 — Объект полностью инициализирован; получен ответ от сервера, завершен)
#responseText — представление ответа сервера в виде обычного текста (строки).
#responseXML — объект документа, совместимый с DOM, полученного от сервера.
#status — состояние ответа от сервера.
#statusText — текстовое представление состояния ответа от сервера.

#curl [options...] <url>
 # -d, --data <data>          HTTP POST data (отправить данные)
 # -f, --fail                 Fail silently (no output at all) on HTTP errors
 # -h, --help <category>      Get help for commands
 # -i, --include              Include protocol response headers in the output (получить хедеры)
 # -o, --output <file>        Write to file instead of stdout
 # -O, --remote-name          Write output to a file named as the remote file
 # -s, --silent               Silent mode
 # -T, --upload-file <file>   Transfer local FILE to destination
 # -u, --user <user:password> Server user and password
 # -A, --user-agent <name>    Send User-Agent <name> to server
 # -v, --verbose              Make the operation more talkative
 # -V, --version              Show version number and quit
 # -L - при перенаправлении урл
 # -X - метод POST