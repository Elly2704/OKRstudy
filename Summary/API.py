REST #( Representational State Transfer ) — самый популярный архитектурный стиль создания API. В архитектуре RESTful
#доступ к ресурсам и манипулирование ими можно осуществлять с помощью стандартных методов HTTP, таких как GET,
#POST, PUT и DELETE.
HTTP #— сокращение от HyperText Transfer Protocol (протокол передачи гипертекста). Протокол используется для общения
# клиента и сервера. Для тестирования в качестве клиента я использую Postman. Под термином гипертекст следует
# понимать текст, в понятном для человека представлении, при этом содержащий ссылки на другие ресурсы.

#Методы
GET: #GET-запросы используются для получения данных от API. Метод GET запрашивает представление ресурса. Запросы
# с использованием этого метода могут только извлекать данные.
POST: #POST-запросы используются для отправки новых данных API. POST используется для отправки сущностей
# к определённому ресурсу. Часто вызывает изменение состояния на сервере.
PUT: #PUT-запросы используются для обновления уже существующих данных. PUT заменяет все текущие представления
# ресурса данными запроса.
PATCH: #PATCH-запросы (как и PUT) используются для обновления уже существующих данных. Разница в том, что с
# помощью PATCH запросов можно обновить несколько записей за раз.
OPTIONS: #OPTIONS используется для описания параметров соединения с ресурсом.
DELETE: #DELETE-запросы используются для удаления существующих данных.

HTTP-запросы: структура, методы, строка статуса и коды состояния
#HTTP-сообщения: запросы и ответы
#Данные между клиентом и сервером в рамках работы протокола передаются с помощью HTTP-сообщений.
#Они бывают двух видов:
#Запросы (HTTP Requests) — сообщения, которые отправляются клиентом на сервер, чтобы вызвать выполнение некоторых
#действий. Зачастую для получения доступа к определенному ресурсу. Основой запроса является HTTP-заголовок.
#Ответы (HTTP Responses) — сообщения, которые сервер отправляет в ответ на клиентский запрос.

#Запросы HTTP, так и ответы имеют следующую структуру:
#Стартовая строка (start line) — используется для описания версии используемого протокола и другой информации — вроде
#запрашиваемого ресурса или кода ответа.
#Стартовая строка HTTP-запроса состоит из трех элементов:
#1.Метод HTTP-запроса (method, реже используется термин verb).
# Указывает, что конкретно нужно сделать с запрашиваемым ресурсом. Например, метод GET сообщает серверу, что
# пользователь хочет получить некоторые данные, а POST — что некоторые данные должны быть помещены на сервер.
#2.Цель запроса. Представлена указателем ресурса URL, который состоит из протокола, доменного имени (или IP-адреса),
# пути к конкретному ресурсу на сервере. Дополнительно может содержать указание порта, несколько параметров
# HTTP-запроса и еще ряд опциональных элементов.
#3.Версия используемого протокола (либо HTTP/1.1, либо HTTP/2), которая определяет структуру следующих
# за стартовой строкой данных.

#GET/index.html HTTP/2 - example

HTTP-заголовки # (HTTP Headers) — несколько строчек текста в определенном формате, которые либо уточняют запрос,
#либо описывают содержимое тела сообщения.
#Заголовки HTTP позволяют клиенту и серверу отправлять дополнительную информацию с HTTP запросом или ответом.
#В HTTP-заголовке содержится не чувствительное к регистру название, а затем после (:) непосредственно значение
#(https://selectel.ru/blog/http-request/  https://developer.mozilla.org/ru/docs/Web/HTTP/Headers - заголовки с более подробным описанием)
#Заголовки бывают:
#1.Общего назначения, которые применяются ко всему сообщению целиком.
#2.Заголовки запроса уточняют некоторую информацию о запросе, сообщая дополнительный контекст или ограничивая его
#некоторыми логическими условиями.
#3.Заголовки представления, которые описывают формат данных сообщения и используемую кодировку. Добавляются к
# запросу только в тех случаях, когда с ним передается некоторое тело.

#Самые частые заголовки запроса:
Host
#Используется для указания того, с какого конкретно хоста запрашивается ресурс.
#В качестве возможных значений могут использоваться как доменные имена, так и IP-адреса.
#На одном HTTP-сервере может быть размещено несколько различных веб-сайтов. Для обращения к какому-то
#конкретному требуется данный заголовок.
User-Agent
#Заголовок используется для описания клиента, который запрашивает ресурс. Он содержит достаточно много
#информации о пользовательском окружении. Например, может указать, какой браузер используется в качестве клиента,
#его версию, а также операционную систему, на которой этот клиент работает.
Refer
#Используется для указания того, откуда поступил текущий запрос. Например, если вы решите перейти
#по какой-нибудь ссылке.
Accept
#Позволяет указать, какой тип медиафайлов принимает клиент. В данном заголовке могут быть указаны несколько типов,
#перечисленные через запятую (‘ , ‘). А для указания того, что клиент принимает любые типы, используется
#следующая последовательность — */*.
Cookie
#Данный заголовок может содержать в себе одну или несколько пар «Куки-Значение» в формате cookie=value.
#Куки представляют собой небольшие фрагменты данных, которые хранятся как на стороне клиента, так и на сервере,
#и выступают в качестве идентификатора. Куки передаются вместе с запросом для поддержания доступа клиента к ресурсу.
#Помимо этого, куки могут использоваться и для других целей, таких как хранение пользовательских предпочтений н
#а сайте и отслеживание клиентской сессии. Несколько кук в одном заголовке могут быть перечислены с помощью
#символа точка с запятой (‘ ; ‘), который  используется как разделитель.
Authorization
#Используется в качестве еще одного метода идентификации клиента на сервере. После успешной идентификации
#сервер возвращает токен, уникальный для каждого конкретного клиента. В отличие от куки, данный токен
#хранится исключительно на стороне клиента и отправляется клиентом только по запросу сервера. Существует несколько
#типов аутентификации, конкретный метод определяется тем веб-сервером или веб-приложением, к которому клиент
#обращается за ресурсом.

#Опциональное тело сообщения, которое содержит данные, связанные с запросом, либо документ (например HTML-страницу),
#передаваемый в  ответе.Завершающая часть HTTP-запроса — это его тело. Не у каждого HTTP-метода предполагается
#наличие тела. Так, например, методам вроде GET, HEAD, DELETE, OPTIONS обычно не требуется тело.
#Некоторые виды запросов  могут отправлять данные на сервер в теле запроса: самый распространенный из таких методов — POST.

Ответы HTTP
#HTTP-ответ является сообщением, которое сервер отправляет клиенту в ответ на его запрос. Его структура равна структуре
#HTTP-запроса: стартовая строка, заголовки и тело.
#Строка статуса (Status line)
#Стартовая строка HTTP-ответа называется строкой статуса (status line). На ней располагаются следующие элементы:
#1.Версия протокола (HTTP/2 или HTTP/1.1).
#2.Код состояния, который указывает, насколько успешно завершилась обработка запроса.
#3.Пояснение — короткое текстовое описание к коду состояния. Используется исключительно для того, чтобы упростить
#понимание и восприятие человека при просмотре ответа.
#Response Headers, или заголовки ответа, используются для того, чтобы уточнить ответ, и никак не влияют на содержимое
#тела. Они существуют в том же формате, что и остальные заголовки, а именно  «Имя-Значение» с двоеточием (:) в
#качестве разделителя.
Server
#Server: ngnix
#Содержит информацию о сервере, который обработал запрос.
Set-Cookie
#Set-Cookie:PHPSSID=bf42938f
#Содержит куки, требуемые для идентификации клиента. Браузер парсит куки и сохраняет их в своем хранилище для
# дальнейших запросов.
WWW-Authenticate
#WWW-Authenticate: BASIC realm=»localhost»
#Уведомляет клиента о типе аутентификации, который необходим для доступа к запрашиваемому ресурсу.

AJAX #— Asynchronous Javascript and XML. На странице создаеться объект XMLHttpRequest, который является посредником
# между Браузером пользователя и сервером. С помощью XMLHttpRequest можно отправить запрос на сервер, а также получить
# ответ в виде различного рода данных без полной перезагрузки страницы.

#Свойства объекта XMLHttpRequest
#onreadystatechange — одно из самых главных свойств объекта XMLHttpRequest. С помощью этого свойства задаётся
# обработчик, который вызывается всякий раз при смене статуса объекта.
#readyState — число, обозначающее статус объекта.
# (0 — Объект не инициализирован, создан объект XMLHttpRequest, но метод open() ещё не вызывался.
#1 — Объект загружает данные, открыто новое соединение с помощью open() (этот этап также включает установку
# значений HTTP заголовкам с помощью setRequestHeader()).
#2 — Объект загрузил свои данные, отправлен (вызван send() и получены заголовки ответа.
#3 — Объек не полностью загружен, но может взаимодействовать с пользователем, получена часть ответа.
#4 — Объект полностью инициализирован; получен ответ от сервера, завершен)
#responseText — представление ответа сервера в виде обычного текста (строки).
#responseXML — объект документа, совместимый с DOM, полученного от сервера.
#status — состояние ответа от сервера.
#statusText — текстовое представление состояния ответа от сервера.

#cURL (client URL) является небольшой утилитой командной строки, которая позволяет работать с HTTP и рядом других протоколов.
#curl [options...] <url>
 # -d, --data <data>          HTTP POST data (отправить данные)
 # -f, --fail                 Fail silently (no output at all) on HTTP errors
 # -h, --help <category>      Get help for commands
 # -i, --include              Include protocol response headers in the output (получить хедеры)
 # -o, --output <file>        Write to file instead of stdout
 # -O, --remote-name          Write output to a file named as the remote file
 # -s, --silent               Silent mode
 # -T, --upload-file <file>   Transfer local FILE to destination
 # -u, --user <user:password> Server user and password
 # -A, --user-agent <name>    Send User-Agent <name> to server
 # -v, --verbose              Make the operation more talkative
 # -V, --version              Show version number and quit
 # -L - при перенаправлении урл
 # -X - метод POST
 # -F - Загрузка файла


